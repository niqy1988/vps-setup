### Set up workding directories
- name: Set up nginx folder
  become: yes
  file:
    path: "{{ app_path }}"
    owner: "{{ username }}"
    group: "{{ username }}"
    recurse: yes
    state: directory

- name: Set up nginx subfolders
  become: yes
  become_user: "{{ username }}"
  file:
    path: "{{ app_path }}/{{ item }}"
    state: directory
  loop:
    - conf.d
    - stream.d
    - logs

- name: Copy nginx.conf
  become: yes
  become_user: "{{ username }}"
  copy:
    src: nginx.conf
    dest: "{{ app_path }}"

- name: Set up certs folder
  become: yes
  file:
    path: "{{ certs_path }}"
    owner: "{{ username }}"
    group: "{{ username }}"
    state: directory

### Read facts
- name: Read network and port facts
  set_fact:
    ports_list: "{{ (ansible_local.podman_ports.tcp + ansible_local.podman_ports.tcp) | unique }}"
    publish_ports: >
      {{ 
        ansible_local.podman_ports.tcp | default([]) | unique 
        | map('string') | map('regex_replace', '([0-9]+)', '\1:\1/tcp') 
        + 
        ansible_local.podman_ports.udp | default([]) | unique 
        | map('string') | map('regex_replace', '([0-9]+)', '\1:\1/udp')
      }}

### Set up podman container
- name: Create nginx container
  become: yes
  become_user: "{{ username }}"
  containers.podman.podman_container:
    name: "{{ container }}"
    image: docker.io/nginx:alpine
    label:
      io.containers.autoupdate: registry
      PODMAN_SYSTEMD_UNIT: "container-{{ container }}.service"
    publish: "{{ publish_ports }}"
    network: "{{ networks }}"
    volume:
      - "{{ app_path }}/nginx.conf:/etc/nginx/nginx.conf:ro"
      - "{{ app_path }}/conf.d:/etc/nginx/conf.d:ro"
      - "{{ app_path }}/stream.d:/etc/nginx/stream.d:ro"
      - "{{ certs_path }}:/etc/nginx/certs:ro"
      - "{{ app_path }}/logs:/var/log/nginx"
    recreate: yes
    state: created
    healthcheck: "netstat -ntlp | grep -q :{{ ports_list | first | string }}"
    healthcheck_interval: 10s
    healthcheck_timeout: 2s
    healthcheck_retries: 3
    generate_systemd:
      path: "/home/{{ username }}/.config/systemd/user"
      restart_policy: always

- name: Start nginx service
  become: yes
  become_user: "{{ username }}"
  systemd:
    name: "container-{{ container }}.service"
    scope: user
    daemon_reload: yes
    enabled: yes
    state: started

- name: Sanity check for all ports listened
  wait_for:
    port: "{{ item }}"
    timeout: 5
  loop: "{{ ports_list }}"

### Cron job to reload nginx config
- name: Set up nginx reload cron job
  become: yes
  become_user: "{{ username }}"
  cron:
    name: reload nginx config
    special_time: hourly
    job: podman exec {{ container }} nginx -s reload
