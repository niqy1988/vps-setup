### Set up workding directories
- name: Set up nginx folder
  become: yes
  file:
    path: "{{ nginx_path }}"
    owner: "{{ podman_username }}"
    group: "{{ podman_username }}"
    recurse: yes
    state: directory

- name: Set up nginx folders
  become: yes
  become_user: "{{ podman_username }}"
  block:
    - name: Set up basic nginx folders
      file:
        path: "{{ nginx_path }}/{{ item }}"
        state: directory
        seuser: system_u
      loop:
        - conf.d
        - stream.d
        - logs
    - name: Set up domain config folders
      file:
        path: "{{ nginx_path }}/conf.d/{{ item }}/www"
        state: directory
        seuser: system_u
      loop: "{{ domains }}"
  notify: Reload nginx

- name: Create nginx config files
  become: yes
  become_user: "{{ podman_username }}"
  block:
    - name: base config
      copy:
        src: nginx.conf
        dest: "{{ nginx_path }}"
        setype: container_file_t
    - name: Reject invalid ssl handshakes
      copy:
        src: ssl_reject_handshake.conf
        dest: "{{ nginx_path }}/conf.d/ssl_reject_handshake.conf"
        setype: container_file_t
    - name: Set up https redirect
      template:
        src: ssl_redirect.conf.j2
        dest: "{{ nginx_path }}/conf.d/{{ item }}/ssl_redirect.conf"
        setype: container_file_t
      loop: "{{ domains }}"
    - name: Set up www config
      template:
        src: www.conf.j2
        dest: "{{ nginx_path }}/conf.d/{{ item }}/www.conf"
        setype: container_file_t
      loop: "{{ domains }}"
  notify: Reload nginx

- name: Set up certs folder
  become: yes
  file:
    path: "{{ certs_path }}"
    owner: "{{ podman_username }}"
    group: "{{ podman_username }}"
    state: directory
    seuser: system_u
  notify: Reload nginx

### Set up podman container
- name: Create nginx container
  become: yes
  become_user: "{{ podman_username }}"
  containers.podman.podman_container:
    name: "{{ nginx_container }}"
    image: docker.io/nginx:alpine
    label:
      io.containers.autoupdate: registry
      PODMAN_SYSTEMD_UNIT: "container-{{ nginx_container }}.service"
    publish:
      - 443:443/tcp
      - 80:80/tcp
    network: "{{ podman_network }}"
    volume:
      - "{{ nginx_path }}/nginx.conf:/etc/nginx/nginx.conf:z"
      - "{{ nginx_path }}/conf.d:/etc/nginx/conf.d:z"
      - "{{ nginx_path }}/stream.d:/etc/nginx/stream.d:z"
      - "{{ certs_path }}:/etc/nginx/certs:z"
      - "{{ nginx_path }}/logs:/var/log/nginx:z"
    state: created
    healthcheck: "netstat -ntlp | grep -q :443"
    healthcheck_interval: 10s
    healthcheck_timeout: 2s
    healthcheck_retries: 3
    generate_systemd:
      path: "/home/{{ podman_username }}/.config/systemd/user"

- name: Start nginx service
  become: yes
  become_user: "{{ podman_username }}"
  systemd:
    name: "container-{{ nginx_container }}.service"
    scope: user
    daemon_reload: yes
    enabled: yes
    state: started

- name: Sanity check for all ports listened
  wait_for:
    port: "{{ item }}"
    timeout: 5
  loop:
    - 80
    - 443

### Cron job to reload nginx config
- name: Set up nginx reload cron job
  become: yes
  become_user: "{{ podman_username }}"
  cron:
    name: reload nginx config
    special_time: hourly
    job: podman exec {{ nginx_container }} nginx -s reload
