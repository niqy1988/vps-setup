### Set up PLEX config
- name: Setup PLEX folders
  become: yes
  file:
    path: "{{ item }}"
    owner: "{{ podman_username }}"
    group: "{{ podman_username }}"
    recurse: yes
    state: directory
  loop:
    - "{{ plex_path }}"
    - "{{ plex_path }}/config"
    - "{{ plex_path }}/transcode"
    - "{{ media_path }}"

- name: Check existing PLEX preference file
  stat:
    path: "{{ plex_path }}/config/Library/Application Support/Plex Media Server/Preferences.xml"
  register: pref_stat

- name: Input PLEX claim token
  pause:
    prompt: "Input a claim token, acquired from https://www.plex.tv/claim "
  register: plex_claim_token
  when: not pref_stat.stat.exists

### Podman container and service
- name: Create PLEX container
  become: yes
  become_user: "{{ podman_username }}"
  containers.podman.podman_container:
    name: "{{ plex_container }}"
    image: docker.io/plexinc/pms-docker
    label:
      io.containers.autoupdate: registry
      PODMAN_SYSTEMD_UNIT: "container-{{ plex_container }}.service"
    env:
      PLEX_CLAIM: "{{ plex_claim_token.user_input | default('') }}"
      PLEX_UID: "0"
      PLEX_GID: "0"
    network: "{{ podman_network }}"
    publish:
      - "{{ plex_direct_port }}:32400/tcp"
    volume:
      - "{{ plex_path }}/config:/config:z"
      - "{{ plex_path }}/transcode:/transcode:z"
      - "{{ media_path }}:{{ media_path }}:z"
    state: created
    generate_systemd:
      path: "/home/{{ podman_username }}/.config/systemd/user"

- name: Enable and start PLEX service
  become: yes
  become_user: "{{ podman_username }}"
  systemd:
    name: "container-{{ plex_container }}.service"
    scope: user
    daemon_reload: yes
    enabled: yes
    state: started
    
- name: Sanity check for direct port listened
  wait_for:
    port: "{{ plex_direct_port }}"
    timeout: 5

### nginx
- name: Create nginx rule to access PLEX webui
  become: yes
  become_user: "{{ podman_username }}"
  template:
    src: plex.conf.j2
    dest: "{{ nginx_path }}/conf.d/{{ item }}/plex.conf"
    setype: container_file_t
  loop: "{{ domains }}"
  notify: "Reload nginx"
