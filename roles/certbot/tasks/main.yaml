- name: Set up certbot folder
  become: yes
  file:
    path: "{{ certbot_path }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    recurse: yes
    state: directory

- name: Generate Cloudflare API ini
  template:
    src: cloudflare.ini.j2
    dest: "{{ certbot_path }}/cloudflare.ini"

- name: Load list of existing domains    
  set_fact:
    cur_domains: "{{ ansible_local.certbot.domains | default([]) }}"

- name: Find new domains not on the host
  set_fact:
    new_domains: "{{ domain_names | difference(cur_domains) | list }}"
  when: request_new_certs

- name: Request new certificates
  community.general.docker_container:
    name: certbot_request
    image: certbot/dns-cloudflare
    volumes:
      - "{{ certbot_path }}:/etc/letsencrypt"
    command: 
      - "certonly"
      - "--dns-cloudflare"
      - "--dns-cloudflare-credentials /etc/letsencrypt/cloudflare.ini"
      - "-d {{ item }}"
      - "-d *.{{ item }}"
      - "--email {{email_address}}"
      - "--agree-tos"
    pull: yes
    detach: no
    container_default_behavior: no_defaults
  loop: "{{ new_domains }}"
  when: request_new_certs
  retries: 3
  delay: 10
  register: result
  until: result is not failed

- name: Save certbot facts
  copy: 
    content: "{{ { 'domains': (cur_domains + new_domains) | unique } | to_nice_json }}" 
    dest: /etc/ansible/facts.d/certbot.fact
  when: request_new_certs

- name: Set up cron job to renew certificates
  cron:
    name: renew certbot certificates
    special_time: daily
    job: "docker run --rm -it -v {{ certbot_path }}:/etc/letsencrypt certbot/dns-cloudflare renew --dns-cloudflare --agree-tos"

- name: Set up nginx
  block:
    - name: Set up nginx folder
      become: yes
      file:
        path: "{{ nginx_config_path }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        state: directory
    - name: Set up domain config folders
      file:
        path: "{{ nginx_config_path }}/conf.d/{{ item }}"
        state: directory
      loop: "{{ domain_names }}"
    - name: Set up https redirect
      template:
        src: ssl.conf.j2
        dest: "{{ nginx_config_path }}/conf.d/{{ item }}/ssl.conf"
      loop: "{{ domain_names }}"  
  when: nginx_https_redirect
