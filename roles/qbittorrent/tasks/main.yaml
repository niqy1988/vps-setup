- name: Create qBittorrent folder
  become: yes
  file:
    path: "{{ app_path }}"
    owner: "{{ username }}"
    group: "{{ username }}"
    recurse: yes
    state: directory

- name: Set up qBittorrent folder
  become: yes
  become_user: "{{ username }}"
  block:
    - name: Set up folders to mount into container 
      file:
        path: "{{ app_path }}/{{ item }}"
        state: directory
      loop:
        - config
        - incomplete
        - torrents


### Network and ports
- name: Set up podman ports
  import_role:
    name: register_ports
  vars:
    tcp_ports: 
      - "{{ direct_port }}"
    udp_ports:
      - "{{ direct_port }}"
    purge_ports: no


### Podman container and service
- name: Create qBittorrent container
  become: yes
  become_user: "{{ username }}"
  containers.podman.podman_container:
    name: "{{ container }}"
    image: docker.io/linuxserver/qbittorrent
    label:
      io.containers.autoupdate: registry
      PODMAN_SYSTEMD_UNIT: "container-{{ container }}.service"
    env:
      PUID: "0"
      PGID: "0"
    network: "{{ networks }}"
    volume:
      - "{{ app_path }}/config:/config"
      - "{{ app_path }}/incomplete:/downloads/incomplete"
      - "{{ app_path }}/torrents:/downloads/torrents"
      - "{{ download_path }}:/downloads/finished"
    entrypoint: "/bin/sh"
    command:
      - -c
      - /init
    recreate: yes
    state: created
    healthcheck: "netstat -ntlp | grep -q :8080"
    healthcheck_interval: 10s
    healthcheck_timeout: 2s
    healthcheck_retries: 3
    generate_systemd:
      path: "/home/{{ username }}/.config/systemd/user"

- name: Enable and start qBittorrent service
  become: yes
  become_user: "{{ username }}"
  systemd:
    name: "container-{{ container }}.service"
    scope: user
    daemon_reload: yes
    enabled: yes
    state: started


### nginx
- name: Create nginx folder
  become: yes
  file:
    path: "{{ nginx_path }}"
    owner: "{{ nginx_user }}"
    group: "{{ nginx_user }}"
    recurse: yes
    state: directory

- name: Set up nginx site rules
  become: yes
  become_user: "{{ nginx_user }}"
  block:
    - name: Generate nginx config for qBittorrent direct access
      template:
        src: qbittorrent_direct.conf.j2
        dest: "{{ nginx_path }}/stream.d/qbittorrent_direct.conf"
    - name: Create site folders
      file:
        path: "{{ nginx_path }}/conf.d/{{ item }}"
        state: directory
      loop: "{{ domains }}"
    - name: Generate nginx config for qBittorrent sites
      template:
        src: qbittorrent.conf.j2
        dest: "{{ nginx_path }}/conf.d/{{ item }}/qbittorrent.conf"
      loop: "{{ domains }}"
