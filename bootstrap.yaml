---

- name: Set up ansible remote user
  hosts: all
  remote_user: "{{ bootstrap_username | default('root') }}"
  become: yes
  vars:
    username: "{{ ansible_username }}"
    uid: "{{ ansible_uid }}"
    ssh_public_key_file: "{{ ansible_ssh_public_key_file }}"
    ansible_ssh_private_key_file: "{{ bootstrap_ssh_private_key_file | default(root_ssh_private_key_file) }}"
  roles:
    - role: ansible_access

- name: Set up interactive user
  hosts: dev
  become: yes
  vars:
    username: "{{ interactive_username }}"
    password: "{{ interactive_password }}"
    ssh_public_key_file: "{{ interactive_ssh_public_key_file }}"
    user_groups: "{{ interactive_user_groups }}"
    sudoer: "{{ interactive_sudoer }}"
  roles:
    - role: interactive_access
    
- name: Disable ssh login by password and empty passwords
  hosts: all
  become: yes
  vars:
    sshd:
      PermitEmptyPasswords: no
      PasswordAuthentication: no
  roles:
    - role: willshersystems.sshd

- name: Enable TCP BBR congestion control algorithm
  hosts: all
  become: yes
  tasks:
    - name: Set net.core.default_qdisc = fq
      sysctl:
        name: net.core.default_qdisc
        value: fq
        state: present
    - name: Set net.ipv4.tcp_congestion_control = bbr
      sysctl:
        name: net.ipv4.tcp_congestion_control
        value: bbr
        state: present

- name: Initialize firewalld
  hosts: all
  become: yes
  tasks:
    - name: Default service rules
      ansible.posix.firewalld:
        service: "{{ item.service }}"
        state: "{{ item.rule }}"
        permanent: yes
      loop:
        - service: ssh
          rule: enabled
        - service: dhcpv6-client
          rule: enabled
        - service: cockpit
          rule: disabled
      notify:
        - Reload firewalld
    - name: Clean up Oracle Cloud iptables passthrough rules
      lineinfile:
        path: /etc/firewalld/direct.xml
        regexp: "{{ item }}"
        state: absent
      loop:
        - <passthrough ipv="ipv4">-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</passthrough>
        - <passthrough ipv="ipv4">-A INPUT -p icmp -j ACCEPT</passthrough>
        - <passthrough ipv="ipv4">-A INPUT -i lo -j ACCEPT</passthrough>
        - <passthrough ipv="ipv4">-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT</passthrough>
        - <passthrough ipv="ipv4">-A INPUT -j REJECT --reject-with icmp-host-prohibited</passthrough>
        - <passthrough ipv="ipv4">-A FORWARD -j REJECT --reject-with icmp-host-prohibited</passthrough>
        - <passthrough ipv="ipv4">-A OUTPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</passthrough>
      when: hostvars[inventory_hostname]['ansible_chassis_asset_tag'] == "OracleCloud.com"
      notify:
        - Reload firewalld
    - name: Start firewalld service
      systemd:
        name: firewalld
        state: started
      notify:
        - Reload firewalld
  handlers:
    - name: Reload firewalld
      systemd:
        name: firewalld
        state: reloaded
